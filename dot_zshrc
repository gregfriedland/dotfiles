# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="powerlevel10k/powerlevel10k"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# auto-update doesn't play well with chezmoi
DISABLE_AUTO_UPDATE="true"

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git autojump colored-man-pages)

typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet

source $ZSH/oh-my-zsh.sh

export LANG=en_US.UTF-8
export EDITOR='emacs'
export TZ="America/Los_Angeles"
export GLOBIGNORE='*~'

# disable git autocompletion
compdef -d git

##############################################################################
# History Configuration
##############################################################################
# HISTSIZE=50000               #How many lines of history to keep in memory
# HISTFILE=~/.zsh_history     #Where to save history to disk
SAVEHIST=50000               #Number of history entries to save to disk
HISTDUP=erase               #Erase duplicates in the history file
setopt    appendhistory     #Append history to the history file (no overwriting)
setopt    sharehistory      #Share history across terminals
#setopt    incappendhistory  #Immediately append to the history file, not just when a term is killed

# bind up/down arrows to local history only
bindkey "OA" up-line-or-local-history
bindkey "OB" down-line-or-local-history

up-line-or-local-history() {
    zle set-local-history 1
    zle up-line-or-history
    zle set-local-history 0
}
zle -N up-line-or-local-history
down-line-or-local-history() {
    zle set-local-history 1
    zle down-line-or-history
    zle set-local-history 0
}
zle -N down-line-or-local-history

# try to allow auto completion inside of tokens
#zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=* r:|=*'

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# gcloud
# The next line updates PATH for the Google Cloud SDK.
if [ -f '~/bin/google-cloud-sdk/path.zsh.inc' ]; then . '~/bin/google-cloud-sdk/path.zsh.inc'; fi
# The next line enables shell command completion for gcloud.
if [ -f '~/google-cloud-sdk/completion.zsh.inc' ]; then . '~/bin/google-cloud-sdk/completion.zsh.inc'; fi

# FUNCTIONS
function du_top () {
    du -m -t 1MB -d 5 "$@" 2>&1 | sort -nk1 | egrep -v "Operation not permitted|Permission denied"
}

function dr() {
    docker run -it --rm --platform=linux/amd64 "$@"
}

function dr_local() {
    # home_dir=$HOME
    # pwd=$PWD
    # reldir=$(python -c "import os.path; print('$pwd'.replace('$home_dir', '').lstrip('/'))")
    # echo $reldir

    # docker run -it --rm --platform=linux/amd64 -v $PWD:/root/$reldir -v $HOME:/root -w $PWD "$@"
    docker run -it --rm --platform=linux/amd64 -v $PWD:$PWD -v $HOME:$HOME -w $PWD "$@"
}

function drmi() {
    echo "Matching images:"
    docker images | grep "$@"
    read -q REPLY\?"Delete? "
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker images | grep "$@" | tr -s " " | cut -d" " -f3 | xargs docker rmi -f
    fi
}

function kgn() {
    kubectl get nodes -o json|jq -Cjr '.items[] | .metadata.name," ",.metadata.creationTimestamp," ",.metadata.labels."beta.kubernetes.io/instance-type","\n"' | sort -k2 -r
}

function k_status() {
    echo "Nodes:"
    kubectl get nodes "$@" -o json|jq -Cjr '.items[] | .metadata.name," ",.metadata.creationTimestamp," ",.metadata.labels."beta.kubernetes.io/instance-type","\n"' | tr "\t" " " | tr -s " " | cut -d" " -f3| sort | uniq -c | sort -r -nk1
    echo "\nPods:"
    kubectl get pods "$@" | grep -v STATUS | tr "\t" " " | tr -s " " | cut -d" " -f3 | sort | uniq -c | sort -r -nk1
}

function lsfull() {
    ls "$@" | xargs  readlink -f
}

function cuts() {
    tr "\t" " " | tr -s " " | cut -d" " "$@"
}

function cuts_count() {
    tr "\t" " " | tr -s " " | cut -d" " "$@" | sort | uniq -c | sort -r -nk1
}

function kgwf() {
    kubectl get --sort-by=acceptedAt flyteworkflows.flyte.lyft.com -o custom-columns=NAME:.metadata.name,WF:.metadata.labels.workflow-name,START:.acceptedAt,TARGET:inputs.literals.config.scalar.generic.target.name,STATUS:.metadata.labels.termination-status
}

# use bash word separators
autoload -U select-word-style               
select-word-style bash

# ALIASES
alias g=git
alias k=kubectl
alias kget='kubectl get --sort-by=.status.startTime'
alias kgp='kubectl get pods --sort-by=.status.startTime'
alias kdp='kubectl describe pods'
alias kl='kubectl logs'
alias klf='kubectl logs -f'
alias kex='kubectl exec -it'
alias di='docker images'
alias gs='gcloud storage'


[[ "$(which cursor)" != "" ]] && [[ "$TERM_PROGRAM" == "vscode" ]] && . $(cursor --locate-shell-integration-path zsh)

export PATH=$PATH:~/bin:~/bin/google-cloud-sdk/bin
export LD_LIBRARY_PATH=/usr/local/cuda-12.5/targets/x86_64-linux/lib/

